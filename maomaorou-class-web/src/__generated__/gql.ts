/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\nmutation updateProfileData($userProfile: UpdateSelfUserProfileInput) {\n  UpdateSelfUserProfile(userProfile: $userProfile) {\n    data {\n      id\n      attributes {\n        username\n        email\n      }\n    }\n  }\n}\n": types.UpdateProfileDataDocument,
    "\nmutation updateUserPassword($data: UpdateSelfUserPasswordInput) {\n\tUpdateSelfUserPassword(userNewPasswordInfo: $data) {\n    data {\n      id\n    }\n  }\n}\n": types.UpdateUserPasswordDocument,
    "\nquery getMyOrders {\n  myOrders {\n\t\tdata {\n      id\n      attributes {\n        status\n        createdAt\n        totalPrice\n      }\n    }\n  }\n}\n": types.GetMyOrdersDocument,
    "\n  query getAboutus {\n    aboutUs {\n      data {\n        id\n        attributes {\n          content\n          updatedAt\n        }\n      }\n    }\n  }\n": types.GetAboutusDocument,
    "\n  query getArticleContent($title: String!) {\n    newByTitle(title: $title){\n      data {\n        id\n        attributes {\n          title\n          updatedAt\n          content {\n            __typename\n            ... on ComponentLessonContentVideoContent {\n              video {\n                data {\n                  attributes {\n                    url\n                  }\n                }\n              }\n            }\n            ... on ComponentLessonContentTextContent {\n              richText\n            }\n            ... on ComponentLessonContentYoutubeLesson {\n              url\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetArticleContentDocument,
    "\nquery getCategoryData($categoryId: ID!) {\n  category(id: $categoryId) {\n    data {\n      attributes {\n        courses {\n          data {\n            attributes {\n              title\n              image {\n                data {\n                  attributes {\n                    url\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n": types.GetCategoryDataDocument,
    "\n  query GetCoursesQueryData($courseIds: [ID]) {\n    courses(filters: {\n      id: {\n        in: $courseIds\n      }\n    }) {\n      data {\n        id\n        attributes {\n          title\n          firstPrice\n          renewPrice\n          isFirstBuy\n          buyOption {\n            id\n            name\n            price\n          }\n          image {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetCoursesQueryDataDocument,
    "\nmutation registerUser($userData: UsersPermissionsRegisterInput!) {\n  register(input: $userData) {\n    jwt\n  }\n}\n": types.RegisterUserDocument,
    "\nmutation createOrderWithPayment($courses: [CreateOrderWithPaymentInput!]) {\n  createOrderWithPayment(courses: $courses) {\n    paymentUrl\n    orderId\n    error\n  }\n}\n": types.CreateOrderWithPaymentDocument,
    "\nquery GetCourseQueryData($title: String!) {\n    courseByTitle(title: $title) {\n      data {\n        id\n        attributes {\n          title\n          description\n          firstPrice\n          renewPrice\n          firstDurationDay\n          renewDurationDay\n          updatedAt\n          buyOption {\n            id\n            name\n            price\n          }\n          chapters {\n          \tdata {\n              id\n              attributes {\n                name\n                sequence\n                lessons {\n                  data {\n                    id\n                    attributes {\n                      name\n                      sequence \n                    }\n                  }\n                }\n              }\n            }\n        \t}\n          image {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetCourseQueryDataDocument,
    "\n  query getFAQ {\n    faqs {\n      data {\n        id\n        attributes {\n          question\n          answer\n        }\n      }\n    }\n  }\n": types.GetFaqDocument,
    "\nquery GetLearningCourseData($title: String!) {\n    courseByTitle(title: $title) {\n      data {\n        id\n        attributes {\n          title\n          description\n          updatedAt\n          chapters {\n          \tdata {\n              id\n              attributes {\n                name\n                sequence\n                lessons {\n                  data {\n                    id\n                    attributes {\n                      name\n                      sequence\n                      content {\n                      \t__typename\n                      }\n                    }\n                  }\n                }\n              }\n            }\n        \t}\n          image {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetLearningCourseDataDocument,
    "\nquery getMyLesson($id: ID!) {\n  myLesson(id: $id) {\n    data {\n      id\n      attributes {\n        name\n        sequence\n        updatedAt\n        content {\n          __typename\n          ... on ComponentLessonContentVideoContent {\n            video {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n          ... on ComponentLessonContentTextContent {\n            richText\n          }\n          ... on ComponentLessonContentYoutubeLesson {\n            url\n          }\n        }\n      }\n    }\n  }\n}\n": types.GetMyLessonDocument,
    "\nmutation login($email: String!, $password: String!) {\n  login(input: {\n    identifier: $email,\n    password: $password,\n  }) {\n    jwt\n  }\n} \n": types.LoginDocument,
    "\nmutation resetPasswordWithCode($password: String!, $passwordConfirmation: String!, $code: String!) {\n\tresetPassword(password: $password, passwordConfirmation: $passwordConfirmation, code: $code) {\n    user {\n      username\n    }\n  }\n}\n": types.ResetPasswordWithCodeDocument,
    "\nmutation sendForgetPasswordEmail($email: String!) {\n\tforgotPassword(email: $email) {\n    ok\n  }\n}\n": types.SendForgetPasswordEmailDocument,
    "\nquery getBuyedCourses {\n  buyedCourses {\n    data {\n      id\n      attributes {\n        title\n        staredLessons {\n          data {\n            id\n            attributes {\n              name\n              content {\n                __typename\n              }\n            }\n          }\n        }\n        withUserStatus {\n          data {\n            attributes {\n              expiredAt\n            }\n          }\n        }\n        image {\n          data {\n            id\n            attributes {\n              url\n            }\n          }\n        }\n      }\n    }\n  }\n}\n": types.GetBuyedCoursesDocument,
    "\n  query GetOrderData($orderId: ID!) {\n    myOrder(orderId: $orderId) {\n      data {\n        id\n        attributes {\n          status\n          createdAt\n          totalPrice\n          order_courses {\n            data {\n              id\n              attributes {\n                price\n                course {\n                  data {\n                    attributes {\n                      title\n                      image {\n                        data {\n                          attributes {\n                            url\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetOrderDataDocument,
    "\n  mutation ConfirmPayment($orderId: ID!) {\n    userDoneHandlePayment(orderId: $orderId) {\n      data {\n        id\n      }\n    }\n  }\n": types.ConfirmPaymentDocument,
    "\nquery GetMainPageQueryData {\n  courses {\n    data {\n      id\n      attributes {\n        title\n        sequence\n        category {\n\t\t\t\t\tdata {\n          \tid\n            attributes {\n              image {\n                data {\n                  id\n                  attributes {\n                    url\n                  } \n                }\n              }\n            }\n          }\n        }\n        image {\n          data {\n            id\n            attributes {\n              url\n            }\n          }\n        }\n      }\n    }\n  }\n  decorationSetting {\n    data {\n      id\n      attributes {\n        landingPageBackgroundImage {\n          data {\n            attributes {\n              url\n            }\n          }\n        }\n      }\n    }\n  }\n  news {\n    data {\n      id\n      attributes {\n        title\n        createdAt\n        image {\n          data {\n            id\n            attributes {\n              url\n            }\n          }\n        }\n      }\n    }\n  }\n}\n": types.GetMainPageQueryDataDocument,
    "\nmutation register($username: String!, $email: String!, $password: String!) {\n  register(input: {\n    username: $username,\n    email: $email,\n    password: $password,\n  }) {\n    jwt\n  }\n} \n": types.RegisterDocument,
    "\n  query getTerm {\n    term {\n      data {\n        id\n        attributes {\n          content\n          updatedAt\n        }\n      }\n    }\n  }\n": types.GetTermDocument,
    "\n query getIsUserFirstBuyAndPrice($courseId: ID!) {\n    course(id: $courseId) {\n      data {\n        id\n        attributes {\n          isFirstBuy\n        }\n      }\n    }\n  }\n": types.GetIsUserFirstBuyAndPriceDocument,
    "\nmutation AddZeroPriceCourse($courseId: ID) {\n  AddZeroPriceCourseToMyCourse(courseId: $courseId) {\n    data {\n      id\n    }\n  }\n}\n": types.AddZeroPriceCourseDocument,
    "\nquery getUserCoursesStatus($courseIds: [ID!]) {\n  courses(filters: {\n    id: {\n      in: $courseIds\n    }\n  }) {\n    data {\n      attributes {\n        withUserStatus {\n          data {\n            attributes {\n              expiredAt\n              course {\n                data {\n                  id\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n": types.GetUserCoursesStatusDocument,
    "\n  query getUserCourseStatus($courseId: ID!) {\n    course(id: $courseId) {\n      data {\n        attributes {\n          withUserStatus {\n            data {\n              attributes {\n                expiredAt\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  ": types.GetUserCourseStatusDocument,
    "\nquery getUserProfile {\n  me {\n    id\n    username\n    email\n  }\n}\n": types.GetUserProfileDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation updateProfileData($userProfile: UpdateSelfUserProfileInput) {\n  UpdateSelfUserProfile(userProfile: $userProfile) {\n    data {\n      id\n      attributes {\n        username\n        email\n      }\n    }\n  }\n}\n"): (typeof documents)["\nmutation updateProfileData($userProfile: UpdateSelfUserProfileInput) {\n  UpdateSelfUserProfile(userProfile: $userProfile) {\n    data {\n      id\n      attributes {\n        username\n        email\n      }\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation updateUserPassword($data: UpdateSelfUserPasswordInput) {\n\tUpdateSelfUserPassword(userNewPasswordInfo: $data) {\n    data {\n      id\n    }\n  }\n}\n"): (typeof documents)["\nmutation updateUserPassword($data: UpdateSelfUserPasswordInput) {\n\tUpdateSelfUserPassword(userNewPasswordInfo: $data) {\n    data {\n      id\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery getMyOrders {\n  myOrders {\n\t\tdata {\n      id\n      attributes {\n        status\n        createdAt\n        totalPrice\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery getMyOrders {\n  myOrders {\n\t\tdata {\n      id\n      attributes {\n        status\n        createdAt\n        totalPrice\n      }\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getAboutus {\n    aboutUs {\n      data {\n        id\n        attributes {\n          content\n          updatedAt\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getAboutus {\n    aboutUs {\n      data {\n        id\n        attributes {\n          content\n          updatedAt\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getArticleContent($title: String!) {\n    newByTitle(title: $title){\n      data {\n        id\n        attributes {\n          title\n          updatedAt\n          content {\n            __typename\n            ... on ComponentLessonContentVideoContent {\n              video {\n                data {\n                  attributes {\n                    url\n                  }\n                }\n              }\n            }\n            ... on ComponentLessonContentTextContent {\n              richText\n            }\n            ... on ComponentLessonContentYoutubeLesson {\n              url\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getArticleContent($title: String!) {\n    newByTitle(title: $title){\n      data {\n        id\n        attributes {\n          title\n          updatedAt\n          content {\n            __typename\n            ... on ComponentLessonContentVideoContent {\n              video {\n                data {\n                  attributes {\n                    url\n                  }\n                }\n              }\n            }\n            ... on ComponentLessonContentTextContent {\n              richText\n            }\n            ... on ComponentLessonContentYoutubeLesson {\n              url\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery getCategoryData($categoryId: ID!) {\n  category(id: $categoryId) {\n    data {\n      attributes {\n        courses {\n          data {\n            attributes {\n              title\n              image {\n                data {\n                  attributes {\n                    url\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n"): (typeof documents)["\nquery getCategoryData($categoryId: ID!) {\n  category(id: $categoryId) {\n    data {\n      attributes {\n        courses {\n          data {\n            attributes {\n              title\n              image {\n                data {\n                  attributes {\n                    url\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetCoursesQueryData($courseIds: [ID]) {\n    courses(filters: {\n      id: {\n        in: $courseIds\n      }\n    }) {\n      data {\n        id\n        attributes {\n          title\n          firstPrice\n          renewPrice\n          isFirstBuy\n          buyOption {\n            id\n            name\n            price\n          }\n          image {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetCoursesQueryData($courseIds: [ID]) {\n    courses(filters: {\n      id: {\n        in: $courseIds\n      }\n    }) {\n      data {\n        id\n        attributes {\n          title\n          firstPrice\n          renewPrice\n          isFirstBuy\n          buyOption {\n            id\n            name\n            price\n          }\n          image {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation registerUser($userData: UsersPermissionsRegisterInput!) {\n  register(input: $userData) {\n    jwt\n  }\n}\n"): (typeof documents)["\nmutation registerUser($userData: UsersPermissionsRegisterInput!) {\n  register(input: $userData) {\n    jwt\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation createOrderWithPayment($courses: [CreateOrderWithPaymentInput!]) {\n  createOrderWithPayment(courses: $courses) {\n    paymentUrl\n    orderId\n    error\n  }\n}\n"): (typeof documents)["\nmutation createOrderWithPayment($courses: [CreateOrderWithPaymentInput!]) {\n  createOrderWithPayment(courses: $courses) {\n    paymentUrl\n    orderId\n    error\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery GetCourseQueryData($title: String!) {\n    courseByTitle(title: $title) {\n      data {\n        id\n        attributes {\n          title\n          description\n          firstPrice\n          renewPrice\n          firstDurationDay\n          renewDurationDay\n          updatedAt\n          buyOption {\n            id\n            name\n            price\n          }\n          chapters {\n          \tdata {\n              id\n              attributes {\n                name\n                sequence\n                lessons {\n                  data {\n                    id\n                    attributes {\n                      name\n                      sequence \n                    }\n                  }\n                }\n              }\n            }\n        \t}\n          image {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\nquery GetCourseQueryData($title: String!) {\n    courseByTitle(title: $title) {\n      data {\n        id\n        attributes {\n          title\n          description\n          firstPrice\n          renewPrice\n          firstDurationDay\n          renewDurationDay\n          updatedAt\n          buyOption {\n            id\n            name\n            price\n          }\n          chapters {\n          \tdata {\n              id\n              attributes {\n                name\n                sequence\n                lessons {\n                  data {\n                    id\n                    attributes {\n                      name\n                      sequence \n                    }\n                  }\n                }\n              }\n            }\n        \t}\n          image {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getFAQ {\n    faqs {\n      data {\n        id\n        attributes {\n          question\n          answer\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getFAQ {\n    faqs {\n      data {\n        id\n        attributes {\n          question\n          answer\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery GetLearningCourseData($title: String!) {\n    courseByTitle(title: $title) {\n      data {\n        id\n        attributes {\n          title\n          description\n          updatedAt\n          chapters {\n          \tdata {\n              id\n              attributes {\n                name\n                sequence\n                lessons {\n                  data {\n                    id\n                    attributes {\n                      name\n                      sequence\n                      content {\n                      \t__typename\n                      }\n                    }\n                  }\n                }\n              }\n            }\n        \t}\n          image {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\nquery GetLearningCourseData($title: String!) {\n    courseByTitle(title: $title) {\n      data {\n        id\n        attributes {\n          title\n          description\n          updatedAt\n          chapters {\n          \tdata {\n              id\n              attributes {\n                name\n                sequence\n                lessons {\n                  data {\n                    id\n                    attributes {\n                      name\n                      sequence\n                      content {\n                      \t__typename\n                      }\n                    }\n                  }\n                }\n              }\n            }\n        \t}\n          image {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery getMyLesson($id: ID!) {\n  myLesson(id: $id) {\n    data {\n      id\n      attributes {\n        name\n        sequence\n        updatedAt\n        content {\n          __typename\n          ... on ComponentLessonContentVideoContent {\n            video {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n          ... on ComponentLessonContentTextContent {\n            richText\n          }\n          ... on ComponentLessonContentYoutubeLesson {\n            url\n          }\n        }\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery getMyLesson($id: ID!) {\n  myLesson(id: $id) {\n    data {\n      id\n      attributes {\n        name\n        sequence\n        updatedAt\n        content {\n          __typename\n          ... on ComponentLessonContentVideoContent {\n            video {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n          ... on ComponentLessonContentTextContent {\n            richText\n          }\n          ... on ComponentLessonContentYoutubeLesson {\n            url\n          }\n        }\n      }\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation login($email: String!, $password: String!) {\n  login(input: {\n    identifier: $email,\n    password: $password,\n  }) {\n    jwt\n  }\n} \n"): (typeof documents)["\nmutation login($email: String!, $password: String!) {\n  login(input: {\n    identifier: $email,\n    password: $password,\n  }) {\n    jwt\n  }\n} \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation resetPasswordWithCode($password: String!, $passwordConfirmation: String!, $code: String!) {\n\tresetPassword(password: $password, passwordConfirmation: $passwordConfirmation, code: $code) {\n    user {\n      username\n    }\n  }\n}\n"): (typeof documents)["\nmutation resetPasswordWithCode($password: String!, $passwordConfirmation: String!, $code: String!) {\n\tresetPassword(password: $password, passwordConfirmation: $passwordConfirmation, code: $code) {\n    user {\n      username\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation sendForgetPasswordEmail($email: String!) {\n\tforgotPassword(email: $email) {\n    ok\n  }\n}\n"): (typeof documents)["\nmutation sendForgetPasswordEmail($email: String!) {\n\tforgotPassword(email: $email) {\n    ok\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery getBuyedCourses {\n  buyedCourses {\n    data {\n      id\n      attributes {\n        title\n        staredLessons {\n          data {\n            id\n            attributes {\n              name\n              content {\n                __typename\n              }\n            }\n          }\n        }\n        withUserStatus {\n          data {\n            attributes {\n              expiredAt\n            }\n          }\n        }\n        image {\n          data {\n            id\n            attributes {\n              url\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery getBuyedCourses {\n  buyedCourses {\n    data {\n      id\n      attributes {\n        title\n        staredLessons {\n          data {\n            id\n            attributes {\n              name\n              content {\n                __typename\n              }\n            }\n          }\n        }\n        withUserStatus {\n          data {\n            attributes {\n              expiredAt\n            }\n          }\n        }\n        image {\n          data {\n            id\n            attributes {\n              url\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetOrderData($orderId: ID!) {\n    myOrder(orderId: $orderId) {\n      data {\n        id\n        attributes {\n          status\n          createdAt\n          totalPrice\n          order_courses {\n            data {\n              id\n              attributes {\n                price\n                course {\n                  data {\n                    attributes {\n                      title\n                      image {\n                        data {\n                          attributes {\n                            url\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetOrderData($orderId: ID!) {\n    myOrder(orderId: $orderId) {\n      data {\n        id\n        attributes {\n          status\n          createdAt\n          totalPrice\n          order_courses {\n            data {\n              id\n              attributes {\n                price\n                course {\n                  data {\n                    attributes {\n                      title\n                      image {\n                        data {\n                          attributes {\n                            url\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation ConfirmPayment($orderId: ID!) {\n    userDoneHandlePayment(orderId: $orderId) {\n      data {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ConfirmPayment($orderId: ID!) {\n    userDoneHandlePayment(orderId: $orderId) {\n      data {\n        id\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery GetMainPageQueryData {\n  courses {\n    data {\n      id\n      attributes {\n        title\n        sequence\n        category {\n\t\t\t\t\tdata {\n          \tid\n            attributes {\n              image {\n                data {\n                  id\n                  attributes {\n                    url\n                  } \n                }\n              }\n            }\n          }\n        }\n        image {\n          data {\n            id\n            attributes {\n              url\n            }\n          }\n        }\n      }\n    }\n  }\n  decorationSetting {\n    data {\n      id\n      attributes {\n        landingPageBackgroundImage {\n          data {\n            attributes {\n              url\n            }\n          }\n        }\n      }\n    }\n  }\n  news {\n    data {\n      id\n      attributes {\n        title\n        createdAt\n        image {\n          data {\n            id\n            attributes {\n              url\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery GetMainPageQueryData {\n  courses {\n    data {\n      id\n      attributes {\n        title\n        sequence\n        category {\n\t\t\t\t\tdata {\n          \tid\n            attributes {\n              image {\n                data {\n                  id\n                  attributes {\n                    url\n                  } \n                }\n              }\n            }\n          }\n        }\n        image {\n          data {\n            id\n            attributes {\n              url\n            }\n          }\n        }\n      }\n    }\n  }\n  decorationSetting {\n    data {\n      id\n      attributes {\n        landingPageBackgroundImage {\n          data {\n            attributes {\n              url\n            }\n          }\n        }\n      }\n    }\n  }\n  news {\n    data {\n      id\n      attributes {\n        title\n        createdAt\n        image {\n          data {\n            id\n            attributes {\n              url\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation register($username: String!, $email: String!, $password: String!) {\n  register(input: {\n    username: $username,\n    email: $email,\n    password: $password,\n  }) {\n    jwt\n  }\n} \n"): (typeof documents)["\nmutation register($username: String!, $email: String!, $password: String!) {\n  register(input: {\n    username: $username,\n    email: $email,\n    password: $password,\n  }) {\n    jwt\n  }\n} \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getTerm {\n    term {\n      data {\n        id\n        attributes {\n          content\n          updatedAt\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getTerm {\n    term {\n      data {\n        id\n        attributes {\n          content\n          updatedAt\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n query getIsUserFirstBuyAndPrice($courseId: ID!) {\n    course(id: $courseId) {\n      data {\n        id\n        attributes {\n          isFirstBuy\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n query getIsUserFirstBuyAndPrice($courseId: ID!) {\n    course(id: $courseId) {\n      data {\n        id\n        attributes {\n          isFirstBuy\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation AddZeroPriceCourse($courseId: ID) {\n  AddZeroPriceCourseToMyCourse(courseId: $courseId) {\n    data {\n      id\n    }\n  }\n}\n"): (typeof documents)["\nmutation AddZeroPriceCourse($courseId: ID) {\n  AddZeroPriceCourseToMyCourse(courseId: $courseId) {\n    data {\n      id\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery getUserCoursesStatus($courseIds: [ID!]) {\n  courses(filters: {\n    id: {\n      in: $courseIds\n    }\n  }) {\n    data {\n      attributes {\n        withUserStatus {\n          data {\n            attributes {\n              expiredAt\n              course {\n                data {\n                  id\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery getUserCoursesStatus($courseIds: [ID!]) {\n  courses(filters: {\n    id: {\n      in: $courseIds\n    }\n  }) {\n    data {\n      attributes {\n        withUserStatus {\n          data {\n            attributes {\n              expiredAt\n              course {\n                data {\n                  id\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getUserCourseStatus($courseId: ID!) {\n    course(id: $courseId) {\n      data {\n        attributes {\n          withUserStatus {\n            data {\n              attributes {\n                expiredAt\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  "): (typeof documents)["\n  query getUserCourseStatus($courseId: ID!) {\n    course(id: $courseId) {\n      data {\n        attributes {\n          withUserStatus {\n            data {\n              attributes {\n                expiredAt\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery getUserProfile {\n  me {\n    id\n    username\n    email\n  }\n}\n"): (typeof documents)["\nquery getUserProfile {\n  me {\n    id\n    username\n    email\n  }\n}\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;